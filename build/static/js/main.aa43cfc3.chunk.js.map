{"version":3,"sources":["components/customer/History.js","App.js","reportWebVitals.js","index.js"],"names":["History","props","state","render","trips","test","bike_id","city","start_time","stop_time","start_longitude","start_latitude","stop_longitude","stop_latitude","price","status","sta","sto","a","this","trip","getAddress","start","getDate","stop","push","date","time","start_spot","stop_spot","setState","timestamp","stamp","split","spot","lng","lat","fetch","then","response","json","result","res","address","Address","renderContainer","className","map","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"ySAKMA,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,QAAQ,EACRC,MAAO,GACPC,KAAO,CACH,CACIC,QAAS,IACTC,KAAM,UACNC,WAAY,sBACZC,UAAW,sBACXC,gBAAiB,kBACjBC,eAAgB,kBAChBC,eAAgB,kBAChBC,cAAe,kBACfC,MAAO,GACPC,OAAQ,WAEZ,CACIT,QAAS,IACTC,KAAM,UACNC,WAAY,sBACZC,UAAW,sBACXC,gBAAiB,kBACjBC,eAAgB,kBAChBC,eAAgB,kBAChBC,cAAe,kBACfC,MAAO,GACPC,OAAQ,YAGhBC,IAAK,GACLC,IAAK,IAhCM,E,6FAoCnB,oCAAAC,EAAA,oEACuBC,KAAKjB,MAAMG,MADlC,gEACee,EADf,iBAEcD,KAAKE,WAAW,QAASD,EAAKV,gBAAiBU,EAAKT,gBAFlE,uBAGcQ,KAAKE,WAAW,OAAQD,EAAKR,eAAgBQ,EAAKP,eAHhE,OAIYS,EAAQH,KAAKI,QAAQH,EAAKZ,YAC1BgB,EAAOL,KAAKI,QAAQH,EAAKX,WAC7BU,KAAKjB,MAAME,MAAMqB,KAAK,CAClBnB,QAASc,EAAKd,QACdC,KAAMa,EAAKb,KACXmB,KAAMJ,EAAMI,KACZlB,WAAYc,EAAMK,KAClBlB,UAAWe,EAAKG,KAChBC,WAAYT,KAAKjB,MAAMc,IACvBa,UAAWV,KAAKjB,MAAMe,IACtBH,MAAOM,EAAKN,MACZC,OAAQK,EAAKL,SAfzB,+IAkBII,KAAKW,SAAS,CAAC3B,QAAQ,IAlB3B,gE,2EAuBA,SAAQ4B,GACJ,IAAIC,EAAQD,EAAUE,MAAM,KACxBP,EAAOM,EAAM,GAAGC,MAAM,KACtBN,EAAOK,EAAM,GAAGC,MAAM,KAK1B,MAJe,CACXP,KAAK,GAAD,OAAKA,EAAK,GAAV,YAAgBA,EAAK,IACzBC,KAAK,GAAD,OAAKA,EAAK,GAAV,YAAgBA,EAAK,O,+DAKjC,WAAiBO,EAAMC,EAAKC,GAA5B,oBAAAlB,EAAA,sEACUmB,MA1EM,mHA0EY,GAAD,OAAIF,EAAJ,YAAWC,IACjCE,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF,IAAIC,EAAMD,EAAOE,QAAQC,QACZ,UAATV,EACA,EAAKJ,SAAS,CAACd,IAAK0B,IAEpB,EAAKZ,SAAS,CAACb,IAAKyB,OAVhC,2C,+EAuBA,WACI,IAAIG,GAAkB,EAoBtB,OAnBG1B,KAAKjB,MAAMC,SACX0C,EACG,gCACG,qDACA,qBAAKC,UAAU,kBAAf,SACK3B,KAAKjB,MAAME,MAAM2C,KAAI,SAAC3B,GAAD,OAChB,sBAAK0B,UAAU,YAAf,UACI,2CAAc1B,EAAKd,WAAY,uBAC/B,uCAAUc,EAAKb,QAAS,uBACxB,wCAAWa,EAAKM,QAAS,uBACzB,wCAAWN,EAAKQ,WAAhB,KAA8BR,EAAKZ,cAAe,uBAClD,uCAAUY,EAAKS,UAAf,KAA4BT,EAAKX,aAAc,uBAC/C,uCAAUW,EAAKN,MAAf,SAA4B,uBAC5B,yCAAYM,EAAKL,sBAMhC8B,M,GAnHMG,IAAMC,WAuHbjD,IC7GAkD,MARf,WACE,OACE,qBAAKJ,UAAU,MAAf,SACI,cAAC,EAAD,OCEOK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASxD,OACP,cAAC,IAAMyD,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.aa43cfc3.chunk.js","sourcesContent":["// import axios from \"axios\";\r\nimport React from \"react\";\r\nimport './customer.scss';\r\nconst GEOCODE_URL = \"https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/reverseGeocode?f=pjson&langCode=EN&location=\";\r\n\r\nclass History extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            render: false,\r\n            trips: [],\r\n            test:  [\r\n                {\r\n                    bike_id: 123,\r\n                    city: \"Umeå\",\r\n                    start_time: '2021-11-11 12:30:12',\r\n                    stop_time: '2021-11-11 12:39:39',\r\n                    start_longitude: 20.26218702049231,\r\n                    start_latitude: 63.82083799007685,\r\n                    stop_longitude: 20.26506354569229,\r\n                    stop_latitude: 63.83095680023798,\r\n                    price: 30,\r\n                    status: \"betalad\"\r\n                },\r\n                {\r\n                    bike_id: 124,\r\n                    city: \"Umeå\",\r\n                    start_time: '2021-11-10 14:39:32',\r\n                    stop_time: '2021-11-10 15:01:59',\r\n                    start_longitude: 20.26288882049231,\r\n                    start_latitude: 63.82083799007685,\r\n                    stop_longitude: 20.26806354569229,\r\n                    stop_latitude: 63.83095200023798,\r\n                    price: 45,\r\n                    status: \"betalad\"\r\n                }\r\n            ],\r\n            sta: \"\",\r\n            sto: \"\"\r\n        };\r\n    }\r\n\r\n    async componentWillMount() {\r\n        for (const trip of this.state.test) {\r\n            await this.getAddress(\"start\", trip.start_longitude, trip.start_latitude)\r\n            await this.getAddress(\"stop\", trip.stop_longitude, trip.stop_latitude)\r\n            let start = this.getDate(trip.start_time);\r\n            let stop = this.getDate(trip.stop_time);\r\n            this.state.trips.push({\r\n                bike_id: trip.bike_id,\r\n                city: trip.city,\r\n                date: start.date,\r\n                start_time: start.time,\r\n                stop_time: stop.time,\r\n                start_spot: this.state.sta,\r\n                stop_spot: this.state.sto,\r\n                price: trip.price,\r\n                status: trip.status\r\n            })\r\n        }\r\n        this.setState({render: true})\r\n    }\r\n\r\n\r\n\r\n    getDate(timestamp) {\r\n        let stamp = timestamp.split(\" \");\r\n        let date = stamp[0].split(\"-\");\r\n        let time = stamp[1].split(\":\")\r\n        let datetime = {\r\n            date: `${date[2]}/${date[1]}`,\r\n            time: `${time[0]}.${time[1]}`\r\n        };\r\n        return datetime;\r\n    }\r\n\r\n    async getAddress(spot, lng, lat)  {\r\n        await fetch(GEOCODE_URL+`${lng},${lat}`)\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .then(result => {\r\n            let res = result.address.Address\r\n            if (spot === \"start\") {\r\n                this.setState({sta: res})\r\n            } else {\r\n                this.setState({sto: res})\r\n            }\r\n        });\r\n          // const addressLabel = (data.address !== undefined) ? data.address.ShortLabel : \"Unknown\";\r\n    }\r\n\r\n    // function getCity(id) {\r\n        // axios.get(`${url}/city/${id}`).then((response) => {\r\n        //     const city = respons.data.name\r\n        // });\r\n        // return city;\r\n    // }\r\n\r\n    render() {\r\n        let renderContainer = false\r\n        if(this.state.render) {\r\n           renderContainer =\r\n              <div>\r\n                 <h1>Dina tidigare resor</h1>\r\n                 <div className=\"trips-container\">\r\n                     {this.state.trips.map((trip) => (\r\n                           <div className=\"trips-div\">\r\n                               <p>Cykel-id: {trip.bike_id}</p><br />\r\n                               <p>Stad: {trip.city}</p><br />\r\n                               <p>Datum: {trip.date}</p><br />\r\n                               <p>Start: {trip.start_spot}, {trip.start_time}</p><br />\r\n                               <p>Stop: {trip.stop_spot}, {trip.stop_time}</p><br />\r\n                               <p>Pris: {trip.price} kr</p><br />\r\n                               <p>Status: {trip.status}</p>\r\n                           </div>\r\n                       ))}\r\n                   </div>\r\n             </div>\r\n        }\r\n        return (renderContainer)\r\n    }\r\n}\r\n\r\nexport default History;\r\n","import './App.scss';\nimport React from \"react\";\n// import Login from \"./components/login/Login\";\nimport History from \"./components/customer/History\";\n// import Adress from \"./components/customer/Adress\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <History />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}